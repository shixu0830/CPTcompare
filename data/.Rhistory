})
size_alte = as.numeric(as.data.frame(NB_byhand[1:length(NB_byhand)])[,seq(3,3*n.lambda,by=3)])
Negbin.y1=s.y1; Negbin.y2=s.y2
p = myexactTestDoubleTail_New(Negbin.y1,Negbin.y2, dispersion=1/(size_alte),n1,n2)
#note: size_alte instead of size_null*norm cuz this time I used pt-level data to est
#code-wise dispersion parameter (captures variability within elements of sumation for s.y1)
}else if(method=="PoisExact"){
p=apply(cbind(s.y2,s.y1),1,FUN=function(x){
poisson.test(x,c(n2,n1),r=1,alternative="two.sided")$p.value
})
}else if(method=="FishersExact"){
table = data.frame(s.bin.y1,m1=n1-s.bin.y1,s.bin.y2,m2=n2-s.bin.y2)
p = apply(table,1,FUN=function(x){
fisher.test(matrix(x,nrow=2,ncol=2),or=1,alternative = "two.sided")$p.value
})
}else if(method=="PredSiteLRT"){
Pred_site = apply(y, 2, FUN=function(x){
m <- try(glm(site~x,data=data.frame(x,site),
control=list(maxit = 50,epsilon = 1e-8,trace=F),
family="binomial"), silent=TRUE)
list(dev=m$null.deviance-m$deviance,error=F)
})
T_Pred_site = as.data.frame(Pred_site[1:length(Pred_site)])[,seq(1,2*n.lambda,by=2)]
p = pchisq(unlist(T_Pred_site),df=1,lower.tail = F)
}else if(method=="Ttest"){
p = apply(y, 2, FUN=function(x){
myttest = t.test(x~site)
if(is.nan(myttest$p.value)){
1
}else{
myttest$p.value
}
})
}
manhattan.data = data.frame(code=numericcode,
p,method=method)
manhattan.data$p.trunc = manhattan.data$p
if(length(manhattan.data$p.trunc[which(manhattan.data$p.trunc<1e-17)])>0){
manhattan.data$p.trunc[which(manhattan.data$p.trunc<1e-17)] = 1e-17
}
if(length(manhattan.data$p.trunc[which(manhattan.data$p.trunc>1)])>0){
manhattan.data$p.trunc[which(manhattan.data$p.trunc>1)] = 1
}
print("P vals done")
return(manhattan.data)
}
SKAT4manhattan = function(site = ptcode$study_site, y = ptcode[,c(4:ncol(ptcode))],
codegrp.order = codegrp.order){
obj<-SKAT_Null_Model(site ~ 1, out_type="D",Adjustment=F)#!!!!! Adjustment is false
## group codes with same procedure description
manhattan.data3 = data.frame(
p = numeric(), codegrp.order = numeric())
# beta.param = c(0.1, 0.1)
codegrp.order.levels = as.numeric(as.character(unique(codegrp.order)))
print("Now SKAT")
for(i in 1:length(codegrp.order.levels)){
ind = which(codegrp.order==codegrp.order.levels[i])
if(length(ind)>0){
tmp.visit = as.matrix(y[,ind]) #!!!! order of column(Z) = order of row(grp)
weight.visit = 1/colMeans(tmp.visit, na.rm = TRUE)
weight.visit=weight.visit/sum(weight.visit) # scale weights
tmp = data.frame(
p = SKAT(tmp.visit, obj, weights= weight.visit,
is_check_genotype = F)$p.value, # is_check_genotype=F!!
codegrp.order = codegrp.order.levels[i])
manhattan.data3 = rbind(manhattan.data3,tmp)
}
}
manhattan.data3$method="SKAT"
manhattan.data3$p.trunc = manhattan.data3$p
if(length(manhattan.data3$p.trunc[which(manhattan.data3$p.trunc<1e-17)])>0){
manhattan.data3$p.trunc[which(manhattan.data3$p.trunc<1e-17)] = 1e-17
}
if(length(manhattan.data3$p.trunc[which(manhattan.data3$p.trunc>1)])>0){
manhattan.data3$p.trunc[which(manhattan.data3$p.trunc>1)] = 1
}
print("SKAT done")
return(manhattan.data3)
}
RR_glmnet = function(dat,cpt){
attach(dat)
x <- model.matrix( ~ factor(CPT)*site + factor(block)*site )
# the structure of the x matrix:
# intercept; code2-2378; site; blk2-191; code2-2378*site; blk2-191*site
n.code = length(unique(CPT)); n.blk = length(unique(block))
site.all = grep("site",colnames(x))
ind.codes.all = grep("CPT",colnames(x))
ind.block.all = grep("block",colnames(x))
ind.codes.site = intersect(ind.codes.all,site.all);length(ind.codes.site)
ind.codes = setdiff(ind.codes.all,site.all);length(ind.codes)
ind.block.site = intersect(ind.block.all,site.all);length(ind.block.site)
ind.block = setdiff(ind.block.all,site.all);length(ind.block)
elements = strsplit(colnames(x),"[)*:]") # regular expression
code.del = as.numeric(as.character(matrix(unlist(elements[ind.codes]),nrow=2)[2,]))
codebysite.del = as.numeric(as.character(matrix(unlist(elements[ind.codes.site]),nrow=3)[2,]))
# check if same:
if(length(which(code.del - codebysite.del>0))==0){
print("colnames of design matrix managed")
}
## the codes chosen to be ref, excludes blk 1 (ref) and the blk whose code is ref in x
## first find the code&blk that is already ref
x.alr_refcode = as.numeric(setdiff(as.numeric(as.character(unique(CPT))), code.del))
## second find which blk the code blong to
x.alr_refblk = cpt$codegrp.order[which(cpt$numericcode == x.alr_refcode)[1]]
## now pick one ref code per block
refcodes = dat$CPT[sapply(setdiff(unique(block),as.numeric(as.character(x.alr_refblk))),
FUN = function(y){which(dat$block==y)[1]})]
## delete ref codes
refcodes = as.numeric(as.character(refcodes))
code.del = which( as.numeric(unlist(lapply(elements,FUN=function(x){
if(length(grep("CPT",x))>0){x[2]}else{""}  }))) %in% refcodes)
#dim(x)[2]
x = x[,-c(code.del)]
#dim(x)[2] + (n.blk-2)*2 ## *2 bc interaction and main effect both deleted the refcodes
y = count
penalty = rep(1,ncol(x))
# no penalty on site
penalty[c(which(colnames(x)=="site"))]=0
## hp ##
## exclude the intercept
## less penalty on anything that has block in it
x.hp = x[,-1]
blah = grep("block",colnames(x))
penalty[blah]=0.5
print("now fit glmnet")
fitL <- glmnet( x.hp, y, family="poisson", offset = logN, alpha=0
,penalty.factor=penalty
)
bbb <- fitL$beta[,95] #hp
lp <- as.vector( x.hp%*%c(bbb)) + fitL$a[95]
rrr_big <- (lp[site==1]) - (lp[site==0])
print("glmnet done")
return(rrr_big)
}
get_pdata = function(use.rrr = log2(exp(rrr_big)),
dat=dat,cpt=cpt,
manhattan.data = manhattan.data){
pdata = data.frame(RR=exp(use.rrr)  , log2RR=use.rrr,
block=as.numeric(as.character(dat$block[dat$site==1])),
CPT=as.numeric(as.character(dat$CPT[dat$site==1])))
pdata = merge(pdata,manhattan.data[,c("numericcode","p.trunc")],by.x="CPT",by.y="numericcode")
## add raw data (count per site)
rawdat = data.frame(data.table(dat)[,list(count0=paste(count[site==0],offset[site==0],sep="/"),
count1=paste(count[site==1],offset[site==1],sep="/")),by="CPT"])
pdata = merge(pdata,rawdat,by="CPT",all.x=T)
## add group info
grp.info = data.frame(data.table(cpt)[,list(trueCPT=unique(as.character(code)),
codegrp=unique(codegrp),grporder=unique(codegrp.order)),
by=c("numericcode")])
pdata = merge(pdata,grp.info,by.x="CPT",by.y="numericcode")
# numericcode is numericonized cpt code; CPT is the true CPT code (including e.g. G codes)
pdata$numericcode = pdata$CPT; pdata$CPT = pdata$trueCPT; pdata = pdata[,!names(pdata) %in% "trueCPT"]
## construct extra info to show in clickme
pdata$Raw_data = paste(pdata$count1, "; ", pdata$count0, sep="")
pdata$extra = paste(pdata$codegrp,", RR = ", sprintf("%.2f",pdata$RR), ", "
,"Raw data = ", pdata$count1, "; ", pdata$count0, sep="")
pdata$RR = sprintf("%.1f",pdata$RR)
## add place holders for codegrps (last step)
allblock = data.frame(
data.table(groupbound)[,list(codegrp.order2=mean(as.numeric(as.character(codegrp.order))),
codegrp=unique(as.character(codegrp))),
by="codegrp.order"])
t = merge(pdata,allblock,by.x="grporder",by.y="codegrp.order",all.y=T)
t = t[,!names(t) %in% c("codegrp.x","codegrp.order2")]#t[,-c(ncol(t)-1,ncol(t)-2)]
t$extra[is.na(t$extra)] = as.character(t$codegrp.y[is.na(t$extra)])
t$RR[is.na(t$RR)]=min(t$RR,na.rm=T); t$log2RR[is.na(t$log2RR)]=floor(min(t$log2RR,na.rm=T)-1);
t$CPT[is.na(t$CPT)]="Blocks not present"; t$numericcode[is.na(t$numericcode)]=0;
t$block[is.na(t$block)] = t$grporder[is.na(t$block)]
t$p.trunc[is.na(t$p.trunc)] = 2
names(t) = c("codegrp.order","CPT","RR","log2RR","blocknum","p.trunc",
"count0","count1","numericcode","Raw_data","extra","Block")
pdata = t
## significance level
pdata$level = cut(pdata$p.trunc,breaks=c(3,1.1,0.05,0.01,
0.05/nrow(pdata),0),right=F)
t = levels(pdata$level); t = strsplit(t, "[[*,*)]")
levels(pdata$level)[unlist(lapply(t,FUN=function(x){x[2]=="0"}))] = "sig. (Bonferroni)"
levels(pdata$level)[unlist(lapply(t,FUN=function(x){x[3]=="0.01"}))] = "0.01 - sig. (Bonferroni)"
levels(pdata$level)[unlist(lapply(t,FUN=function(x){x[3]=="0.05"}))] = "0.05 - 0.01"
levels(pdata$level)[unlist(lapply(t,FUN=function(x){x[3]=="1.1"}))] = "> 0.05"
levels(pdata$level)[unlist(lapply(t,FUN=function(x){x[3]=="3"}))] = "Blocks not present"
pdata$blocknum = as.numeric(as.character(pdata$blocknum))
pdata$p = sprintf("%1.2e", pdata$p.trunc)
pdata = pdata[order(pdata$blocknum),]
}
plot_elements = function(results){
manhattan.data = results[[1]]
manhattan.data2 = results[[2]]
manhattan.data3 = results[[3]]
manhattan.data = manhattan.data[order(manhattan.data$block),]
manhattan.data2 = manhattan.data2[order(manhattan.data2$code),]
manhattan.data3 = manhattan.data3[order(as.numeric(as.character(manhattan.data3$codegrp.order))),]
#working parameter ********************************************
t1=-log10(0.05/nrow(manhattan.data2))         #first threshold
t2=-log10(0.05/nrow(manhattan.data))         #second threshold
maxp=max(-log10(manhattan.data$p.trunc),-log10(manhattan.data3$p.trunc)) #use in ylim
minp = min(-log10(manhattan.data$p.trunc),-log10(manhattan.data3$p.trunc))
# make p=0 to p=1e-17
manhattan.data$p=manhattan.data$p.trunc
p.order = manhattan.data$p[order(manhattan.data$p)]
ind = which(manhattan.data$p==0)
if(length(ind)>0){
manhattan.data$p[ind] = p.order[1+length(ind)]
}
manhattan.data$log10p = -log10(manhattan.data$p)
manhattan.data$color = as.numeric(as.character(manhattan.data$block))%%2
### Cumulative bp
chr=as.numeric(manhattan.data$block)     #chromosome
cn=length(unique(chr))          #total chromosome number
pn=length(manhattan.data$p)                    #total base pair number
bp=c(1:pn)                      #distance
histonum = table(as.factor(chr))
new.chr = rep(c(1:cn), histonum) # if ordered, chr=new.chr
cum.ends = c(0:(cn-1))*cn
cum.bp=numeric(length=pn)
for (i in 1:cn){
cum.bp[chr==unique(chr)[i]] = bp[chr==unique(chr)[i]] + cum.ends[i]
}
cum.bp = cum.bp/mean(cum.bp)  #17000/scale
manhattan.data$cum.bp = cum.bp # must order manhattan.data rows!
## Chr centers (annotate codegrp.big at centers)
bp.mean_by_grp=data.table(chr,cum.bp)[,list(cum.bp.mean=mean(cum.bp)),by="chr"]
cum.centers = data.frame(bp.mean_by_grp)$cum.bp.mean
manhattan.data$cum.bp = cum.bp
print("elements done")
return(list(manhattan.data,manhattan.data2,manhattan.data3))
}
renderChart3 <- function( expr, env = parent.frame(), quoted = FALSE ){
func <- shiny::exprToFunction(expr, env, quoted)
function() {
rChart_ <- func()
cht_style <- sprintf("<style>.rChart {width: %spx; height: %spx} </style>",
rChart_$params$width, rChart_$params$height)
cht <- paste(
capture.output(cat(
rChart_$print()
,render_template(
rChart_$templates$afterScript %||%
"<script></script>"
, list(chartId = rChart_$params$dom, container = rChart_$container)
)
,sep = ""
))
, collapse = "\n")
HTML(paste(c(cht_style, cht), collapse = "\n"))
}
}
wrapup_Manhattan = function(cpt,inputmethod){
cpt = QC(cpt)
nonnumericind = grep("[A-Z,a-z]",as.character(cpt$code))
if(length(nonnumericind)>0){
cptnonnum=cpt[nonnumericind,];cptnum=cpt[-nonnumericind,]
cpt = groupcode(cptnonnum,cptnum)
}else{
cpt = groupcode(NULL, cpt)
}
cpt = renameNonnumeric(cpt)
rslt = dat4manhattan(cpt)
ptcode = data.frame(rslt[[1]]); grpcode = data.frame(rslt[[2]])
cpt = data.frame(rslt[[3]])
## manhattan.data
code_grp = matrix(unlist(strsplit(names(ptcode[,4:ncol(ptcode)]),"_")),nrow=2)
numericcode = substr(code_grp[1,],start=2,stop=6)
codegrp.order = code_grp[2,]
manhattan.data = all_count_Pval(site=ptcode$study_site,y=ptcode[,c(4:ncol(ptcode))],
numericcode,method=inputmethod)#"Ttest")
manhattan.data$code = as.numeric(as.character(manhattan.data$code))
names(manhattan.data)[which(names(manhattan.data)=="code")] = "numericcode"
grp.info = data.frame(data.table(cpt)[,list(codename=unique(as.character(code)),
codegrp=unique(codegrp),grporder=unique(codegrp.order)),
by=c("numericcode")])
manhattan.data=merge(manhattan.data,grp.info,by="numericcode",all.x=F)
## manhattan.data2
codegrp.order2 = substr(names(grpcode[,4:ncol(grpcode)]),start=2,stop=5)
manhattan.data2 = all_count_Pval(site=grpcode$study_site,y=grpcode[,c(4:ncol(grpcode))],
numericcode=codegrp.order2,method=inputmethod)#"Ttest")
grp.info2 = data.frame(data.table(cpt)[,list(codegrp=unique(codegrp),grporder=unique(codegrp.order)),
by=c("codegrp.order")])
manhattan.data2=merge(manhattan.data2,grp.info2,by.x="code",by.y="codegrp.order",all.x=F)
## manhattan.data3
manhattan.data3 = SKAT4manhattan(site = ptcode$study_site, y = ptcode[,c(4:ncol(ptcode))],
codegrp.order = codegrp.order)
manhattan.data3=merge(manhattan.data3,grp.info2,by="codegrp.order",all.x=F)
names(manhattan.data)=c("numericcode","p","Method","p.trunc","CPT","Block","block")
manhattan.data$block = as.numeric(as.character(manhattan.data$block))
manhattan.data2 = manhattan.data2[order(as.numeric(as.character(manhattan.data2$grporder))),]
manhattan.data3 = manhattan.data3[order(as.numeric(as.character(manhattan.data3$grporder))),]
return(list(manhattan.data,manhattan.data2,manhattan.data3))
}
wrapup_RR = function(cpt,inputmethod){
cpt = QC(cpt)
nonnumericind = grep("[A-Z,a-z]",as.character(cpt$code))
if(length(nonnumericind)>0){
cptnonnum=cpt[nonnumericind,];cptnum=cpt[-nonnumericind,]
cpt = groupcode(cptnonnum,cptnum)
}else{
cpt = groupcode(NULL, cpt)
}
cpt = renameNonnumeric(cpt)
rslt = dat4manhattan(cpt)
ptcode = data.frame(rslt[[1]]); grpcode = data.frame(rslt[[2]])
cpt = data.frame(rslt[[3]])
## manhattan.data
code_grp = matrix(unlist(strsplit(names(ptcode[,4:ncol(ptcode)]),"_")),nrow=2)
numericcode = substr(code_grp[1,],start=2,stop=6)
codegrp.order = code_grp[2,]
manhattan.data = all_count_Pval(site=ptcode$study_site,y=ptcode[,c(4:ncol(ptcode))],
numericcode,method=inputmethod)#"Ttest")
manhattan.data$code = as.numeric(as.character(manhattan.data$code))
names(manhattan.data)[which(names(manhattan.data)=="code")] = "numericcode"
grp.info = data.frame(data.table(cpt)[,list(codename=unique(as.character(code)),
codegrp=unique(codegrp),grporder=unique(codegrp.order)),
by=c("numericcode")])
manhattan.data=merge(manhattan.data,grp.info,by="numericcode",all.x=F)
#   ## manhattan.data2
#   codegrp.order2 = substr(names(grpcode[,4:ncol(grpcode)]),start=2,stop=5)
#   manhattan.data2 = all_count_Pval(site=grpcode$study_site,y=grpcode[,c(4:ncol(grpcode))],
#                                    numericcode=codegrp.order2,method=inputmethod)#"Ttest")
#   ## manhattan.data3
#   manhattan.data3 = SKAT4manhattan(site = ptcode$study_site, y = ptcode[,c(4:ncol(ptcode))],
#                                    codegrp.order = codegrp.order)
# RR
dat = dat4RR(cpt)
rrr_big = RR_glmnet(dat,cpt)
data = get_pdata(use.rrr = log2(exp(rrr_big)),
dat=dat,cpt=cpt,manhattan.data = manhattan.data)
data$block = data$blocknum
return(data)
}
Manhattanplot = function(results){
manhattan.data = results[[1]]
manhattan.data2 = results[[2]]
manhattan.data3 = results[[3]]
manhattan.data2$codegrp.order=as.numeric(as.character(manhattan.data2$code))
manhattan.data$codegrp.order=as.numeric(as.character(manhattan.data$block))
manhattan.data$codegrp=manhattan.data$Block
manhattan.data = manhattan.data[order(manhattan.data$codegrp.order),]
manhattan.data2 = manhattan.data2[order(manhattan.data2$codegrp.order),]
manhattan.data3 = manhattan.data3[order(as.numeric(as.character(manhattan.data3$codegrp.order))),]
manhattan.data$p=manhattan.data$p.trunc
#working parameter ********************************************
t1=-log10(0.05/nrow(manhattan.data2))         #first threshold
t2=-log10(0.05/nrow(manhattan.data))         #second threshold
maxp=max(-log10(manhattan.data$p.trunc),-log10(manhattan.data3$p.trunc)) #use in ylim
minp = min(-log10(manhattan.data$p.trunc),-log10(manhattan.data3$p.trunc))
# make p=0 to p=1e-17
p.order = manhattan.data$p[order(manhattan.data$p)]
ind = which(manhattan.data$p==0)
if(length(ind)>0){
manhattan.data$p[ind] = p.order[1+length(ind)]
}
manhattan.data$log10P = -log10(manhattan.data$p)
### Cumulative bp
chr=as.numeric(manhattan.data$codegrp.order)     #chromosome
cn=length(unique(chr))          #total chromosome number
pn=length(manhattan.data$p)                    #total base pair number
bp=c(1:pn)                      #distance
histonum = table(as.factor(chr))
new.chr = rep(c(1:cn), histonum) # if ordered, chr=new.chr
cum.ends = c(0:(cn-1))*cn
cum.bp=numeric(length=pn)
for (i in 1:cn){
cum.bp[chr==unique(chr)[i]] = bp[chr==unique(chr)[i]] + cum.ends[i]
}
cum.bp = cum.bp/median(cum.bp)  #17000/scale
manhattan.data$cum.bp = cum.bp # must order manhattan.data rows!
## Chr centers (annotate codegrp.big at centers)
bp.mean_by_grp=data.table(chr,cum.bp)[,list(cum.bp.mean=mean(cum.bp)),by="chr"]
cum.centers = data.frame(bp.mean_by_grp)$cum.bp.mean
### plot preparation ###
scale=2
#title="CPT Code (Proc+Img Numeric only) Relative Risk Plot \n P(Yes|N. Ca)/P(Yes|Detroit)"
title=""
plot.h = max(-log10(manhattan.data$p))*36
plot.w = 1077*max(cum.bp)
plot.mymar = c(60,24,0.5,0.5)*0.3
plot.mymgp = c(3,1,0)+c(-1.7,0,0)
plot.res = 72*2 #72 # or 72*2
plot.background = "transparent"
xlim.minus = 0.005/2
xlim.plus = 0.005/2
plot.pch = 16 #smaller
fontsize = 1.5*1.7/scale*0.6 #matters!
plot.font.axis = 6/scale*0.6 #matters!
axis.lwd = 2/scale*0.6
points.lwd = 2.7/scale*0.6
plot.lty = 3/scale*0.6
text.srt = 60
pos.big.grp = minp/scale
pos.codegrp = minp-2/scale # height of code grp name (y position)
pos.yaxis = -xlim.minus # y axis's x position
at.n = 5 # y axis
# colors for chromosomes
use = rainbow(cn)
col = use[chr%%cn+1]
# # Color for RR=0
# orderRR = manhattan.data$p[order(manhattan.data$p)]
# dump = which(orderRR<0);
# if(length(dump)>0){
#   last.dump = max(dump)
#   col[log(p)==floor(log(orderRR[last.dump+1]))]="grey"
# }
### plot ###
par(mar=plot.mymar,font.axis=plot.font.axis)
par(mgp=plot.mymgp)
### Plot
xtxt = ""
plot(cum.bp,-log10(manhattan.data$p),
xlim=c(-xlim.minus, cum.bp[pn]+xlim.plus),ylim=c(minp,maxp)+xlim.plus,xaxs="i",
xlab=xtxt,ylab="",cex.lab=fontsize,cex=fontsize*.9,
col=col,axes=F,frame.plot=T,pch=plot.pch,font.axis=plot.font.axis,
main=title, cex.main=fontsize,
mtext(expression(-log[10](P)), side=2, line=2,cex=fontsize*1.3))
# label names
codegrp.labels = unique(manhattan.data$codegrp)
# big.centers = (cum.centers[c(1,12,29,36,50)]+cum.centers[c(11,28,35,49,77)])/2+c(-1,8,-1,-2,5)/1000
# big.labels = c("Evaluation and Management","Surgery","Radiology","Pathology & Laboratory","Medicine")
# plot label
# y label
axis(side=2,
#      at = seq(floor(minp)*100,maxp*100,length.out=at.n)/100,
#      labels = seq(floor(minp)*100,maxp*100,length.out=at.n)/100,
at = seq(floor(minp),maxp,by=at.n),
labels = seq(floor(minp),maxp,by=at.n),
las=1, cex.axis=fontsize,lwd=axis.lwd,
pos=pos.yaxis)
# x label code grp
text(x=cum.centers,y=pos.codegrp,srt=text.srt,adj=1,labels=codegrp.labels,xpd=TRUE,
cex=fontsize*0.8,lwd=axis.lwd) #maxp -1.6
p2=-log10(manhattan.data2$p.trunc)
p3=-log10(manhattan.data3$p.trunc)
points(cum.centers,p2,pch=5,cex=fontsize*.8,lwd = points.lwd*1.2)
points(cum.centers,p3,pch=4,cex=fontsize*.8,lwd = points.lwd*1.2)
legend(#"topright",
x=0.0,y=18,
#title = "By Code Group",
bg="transparent",#box.lwd=1,
legend=c("Burden","SKAT"), pch=c(5,4),col="black",
cex=fontsize*1.2,lwd = axis.lwd*2.2,
lty=0,
box.lwd=0,bty="n")
abline(h=t1,lty=3,col="black") # bonferoni for block level (t1<t2)
abline(h=t2,lty=2,col="blue") # bonferoni for code level
box() # !!!! added on May17, to make it usual
legend(#"topright",
x=0.1,y=18,
#title = "By Code Group",
bg="transparent",#box.lwd=1,
legend=c("Significant level for Code","Significant level for Block"),
lty=c(2,3),col=c("blue","black"),
cex=fontsize*1.2,lwd = axis.lwd*2.2,
box.lwd=0,bty="n")
}
cpt = QC(cpt)
nonnumericind = grep("[A-Z,a-z]",as.character(cpt$code))
if(length(nonnumericind)>0){
cptnonnum=cpt[nonnumericind,];cptnum=cpt[-nonnumericind,]
cpt = groupcode(cptnonnum,cptnum)
}else{
cpt = groupcode(NULL, cpt)
}
cpt = renameNonnumeric(cpt)
rslt = dat4manhattan(cpt)
ptcode = data.frame(rslt[[1]]); grpcode = data.frame(rslt[[2]])
cpt = data.frame(rslt[[3]])
code_grp = matrix(unlist(strsplit(names(ptcode[,4:ncol(ptcode)]),"_")),nrow=2)
numericcode = substr(code_grp[1,],start=2,stop=6)
codegrp.order = code_grp[2,]
manhattan.data = all_count_Pval(site=ptcode$study_site,y=ptcode[,c(4:ncol(ptcode))],
numericcode,method=inputmethod)#"Ttest")
inputmethod="Ttest"
manhattan.data = all_count_Pval(site=ptcode$study_site,y=ptcode[,c(4:ncol(ptcode))],
numericcode,method=inputmethod)#"Ttest")
manhattan.data$code = as.numeric(as.character(manhattan.data$code))
names(manhattan.data)[which(names(manhattan.data)=="code")] = "numericcode"
grp.info = data.frame(data.table(cpt)[,list(codename=unique(as.character(code)),
codegrp=unique(codegrp),grporder=unique(codegrp.order)),
by=c("numericcode")])
manhattan.data=merge(manhattan.data,grp.info,by="numericcode",all.x=F)
cpt$visit=rep(1,nrow(cpt))
cpt.dt=data.table(cpt)
cpt.dt_code=as.data.frame(cpt.dt[,list(visit.sum = sum(visit)),
by = c("code","study_site",
"offset.pt","codegrp.order","codegrp","code_grp")])
# burden sig and SKAT not-sig
t = manhattan.data[grep("CT scan abdomen",manhattan.data$Block),] #179
t = manhattan.data[grep("Laboratory - Chemistry and Hematology",manhattan.data$Block),] #233
names(manhattan.data)
View(manhattan.data)
t = manhattan.data[grep("Laboratory - Chemistry and Hematology",manhattan.data$codegrp),] #233
View(t)
View(cpt)
t = cpt[grep("Laboratory - Chemistry and Hematology",cpt$codegrp),] #233
View(t)
6/0.03
table(t$study_site)
t$visit=1
t.dt=data.table(t)
tt=as.data.frame(t.dt[,list(visit.sum = sum(visit)),
by = c("code","study_site","codegrp.order","codegrp","code_grp")])
View(tt)
t1 = t[t$study_site==1,]
t0 = t[t$study_site==0,]
View(`t1`)
length(unique(t1$code))
length(unique(t0$code))
length(unique(t$code))
length(unique(t1$studyid))
length(unique(t0$studyid))
102/61
65374/2971
102/65374
